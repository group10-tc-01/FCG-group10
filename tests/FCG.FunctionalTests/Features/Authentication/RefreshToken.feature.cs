// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FCG.FunctionalTests.Features.Authentication
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RefreshTokenUseCaseFeature : object, Xunit.IClassFixture<RefreshTokenUseCaseFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features/Authentication", "RefreshTokenUseCase", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RefreshToken.feature"
#line hidden
        
        public RefreshTokenUseCaseFeature(RefreshTokenUseCaseFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Gerar novo token de acesso com sucesso")]
        [Xunit.TraitAttribute("FeatureTitle", "RefreshTokenUseCase")]
        [Xunit.TraitAttribute("Description", "Gerar novo token de acesso com sucesso")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        [Xunit.TraitAttribute("Category", "aceite")]
        public async System.Threading.Tasks.Task GerarNovoTokenDeAcessoComSucesso()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo",
                    "aceite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Gerar novo token de acesso com sucesso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
 await testRunner.GivenAsync("que o usuario deseja gerar um novo token de acesso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 6
 await testRunner.WhenAsync("o usuario envia uma requisicao de refresh token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 7
 await testRunner.ThenAsync("o usuario deve receber um novo token de acesso com sucesso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Refresh token com token valido")]
        [Xunit.TraitAttribute("FeatureTitle", "RefreshTokenUseCase")]
        [Xunit.TraitAttribute("Description", "Refresh token com token valido")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        [Xunit.TraitAttribute("Category", "aceite")]
        public async System.Threading.Tasks.Task RefreshTokenComTokenValido()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo",
                    "aceite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Refresh token com token valido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
 await testRunner.GivenAsync("que o usuario possui um refresh token valido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 12
 await testRunner.WhenAsync("o usuario envia uma requisicao de refresh token com token valido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 13
 await testRunner.ThenAsync("o sistema deve gerar um novo access token", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 14
 await testRunner.AndAsync("o sistema deve gerar um novo refresh token", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 15
 await testRunner.AndAsync("o sistema deve retornar o tempo de expiracao", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Refresh token com token invalido")]
        [Xunit.TraitAttribute("FeatureTitle", "RefreshTokenUseCase")]
        [Xunit.TraitAttribute("Description", "Refresh token com token invalido")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        [Xunit.TraitAttribute("Category", "aceite")]
        public async System.Threading.Tasks.Task RefreshTokenComTokenInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo",
                    "aceite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Refresh token com token invalido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
 await testRunner.GivenAsync("que o usuario possui um refresh token invalido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 20
 await testRunner.WhenAsync("o usuario envia uma requisicao de refresh token com token invalido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 21
 await testRunner.ThenAsync("o sistema deve retornar erro de token invalido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Refresh token com token expirado")]
        [Xunit.TraitAttribute("FeatureTitle", "RefreshTokenUseCase")]
        [Xunit.TraitAttribute("Description", "Refresh token com token expirado")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        [Xunit.TraitAttribute("Category", "aceite")]
        public async System.Threading.Tasks.Task RefreshTokenComTokenExpirado()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo",
                    "aceite"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Refresh token com token expirado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
 await testRunner.GivenAsync("que o usuario possui um refresh token expirado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 26
 await testRunner.WhenAsync("o usuario envia uma requisicao de refresh token com token expirado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 27
 await testRunner.ThenAsync("o sistema deve retornar erro de token expirado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RefreshTokenUseCaseFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RefreshTokenUseCaseFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
