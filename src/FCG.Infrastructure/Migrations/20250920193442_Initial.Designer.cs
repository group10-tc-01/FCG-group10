// <auto-generated />
using System;
using FCG.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FCG.Infrastructure.Migrations
{
    [DbContext(typeof(FcgDbContext))]
    [Migration("20250920193442_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FCG.Domain.Entities.Example", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Example_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Example_IsActive");

                    b.ToTable("Examples", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Games_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Game_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Game_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Games_Name");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_Games_Price");

                    b.HasIndex("Name", "Category")
                        .HasDatabaseName("IX_Games_Name_Category");

                    b.HasIndex("Category", "Price", "IsActive")
                        .HasDatabaseName("IX_Games_Category_Price_Active")
                        .HasFilter("IsActive = 1");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.Library", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Library_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Library_IsActive");

                    b.ToTable("Libraries", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.LibraryGame", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("LibraryId", "GameId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_LibraryGame_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_LibraryGame_IsActive");

                    b.HasIndex("PurchaseDate")
                        .HasDatabaseName("IX_LibraryGames_PurchaseDate");

                    b.HasIndex("LibraryId", "PurchaseDate")
                        .HasDatabaseName("IX_LibraryGames_Library_PurchaseDate");

                    b.HasIndex("GameId", "PurchaseDate", "PurchasePrice")
                        .HasDatabaseName("IX_LibraryGames_Game_Sales");

                    b.ToTable("LibraryGames", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Promotion_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Promotion_IsActive");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_Promotions_DateRange");

                    b.HasIndex("GameId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_Promotions_Game_DateRange");

                    b.HasIndex("IsActive", "StartDate", "EndDate")
                        .HasDatabaseName("IX_Promotions_Active_DateRange")
                        .HasFilter("IsActive = 1");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_User_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email_Unique");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("PromotionId");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FCG.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Balance")
                        .HasDatabaseName("IX_Wallets_Balance");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Wallet_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Wallet_IsActive");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Wallets_UserId_Unique");

                    b.ToTable("Wallets", null, t =>
                        {
                            t.HasCheckConstraint("CK_Wallets_Balance_NonNegative", "Balance >= 0");
                        });
                });

            modelBuilder.Entity("FCG.Domain.Entities.Library", b =>
                {
                    b.HasOne("FCG.Domain.Entities.User", "User")
                        .WithOne("Library")
                        .HasForeignKey("FCG.Domain.Entities.Library", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FCG.Domain.Entities.LibraryGame", b =>
                {
                    b.HasOne("FCG.Domain.Entities.Game", "Game")
                        .WithMany("LibraryGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FCG.Domain.Entities.Library", "Library")
                        .WithMany("LibraryGames")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("FCG.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("FCG.Domain.Entities.Game", "Game")
                        .WithMany("Promotions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FCG.Domain.ValueObjects.Discount", "Discount", b1 =>
                        {
                            b1.Property<Guid>("PromotionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("DiscountValue");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotions");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");
                        });

                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FCG.Domain.Entities.User", b =>
                {
                    b.HasOne("FCG.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("FCG.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("FCG.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("FCG.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FCG.Domain.Entities.Game", b =>
                {
                    b.Navigation("LibraryGames");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("FCG.Domain.Entities.Library", b =>
                {
                    b.Navigation("LibraryGames");
                });

            modelBuilder.Entity("FCG.Domain.Entities.User", b =>
                {
                    b.Navigation("Library")
                        .IsRequired();

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
